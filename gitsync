#!/bin/bash
# Helper script to sync files via git
# Copyright (C) 2014-2020 Scott Weldon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

validArgs=('min_free_space' 'min_free_space_desc' "names" "paths" "commits")
source loadconf "$HOME/.scott_script/gitsync" "config" validArgs[@]

if [ -z "$1" ]
then
  echo "usage: `basename $0` [oldsync] <name> [<time> [no-commit|commit-only|<remote>]]"
  echo
  echo "Arguments:"
  echo "  oldsync: Give as first argument to use old sync logic."
  echo "  <name>: The name of the repo to sync, defined in config file."
  echo "  <time>: Amount of delay between syncs in seconds. Default 60."
  echo "  no-sync|<remote>:"
  echo "    no-sync: Don't sync to any remotes."
  echo "    <remote>: The remote to sync to. Default 'origin'."
  exit 1
fi

if [ "$1" == "oldsync" ]
then
  cmd=sync
  shift
else
  cmd=newsync
fi

if [ "$1" != "all" ]
then
  for (( i=0; i < "${#names[@]}"; i++ ))
  do
    if [ "${names[$i]}" == "$1" ]
    then
      path="${paths[$i]}"
      name="${names[$i]}"
      commit="${commits[$i]}"
    fi
  done

  if [ -z "$name" ]
  then
    echo "There is no repo called \"$1\"!"
    exit 2
  fi

  if [ ! -d "$path" ]
  then
    echo "The repo \"$1\" (located at \"$path\") does not exist!"
    exit 3
  fi
fi

if [ "$2" == "" ]
then
  time=60
else
  time="$2"
fi

if [ "$3" == "" ]
then
  remote="origin"
else
  remote="$3"
fi

function sync() {
  path=$1
  remote=$2

  cd "$path"

  if $commit
  then
    git commit -a -m "auto-commit at `date` on `hostname`"
  fi

  if [ "$remote" != "no-sync" ]
  then
    git remote update "$remote"

    if [ "$?" -eq 0 ]
    then
      #FIXME: this part doesn't work with custom remote name
      localCommit=`git rev-parse @`
      remoteCommit=`git rev-parse @{u}`
      base=`git merge-base @ @{u}`

      if [ "$localCommit" == "$remoteCommit" ]
      then
        echo "Up-to-date"
      elif [ "$localCommit" == "$base" ]
      then
        git pull "$remote" master
      elif [ "$remoteCommit" == "$base" ]
      then
        git push "$remote" master
      else
        echo "-----> Local and remote have diverged. Attempting automatic resolution."
        git pull "$remote" master
        if [ "$?" -eq 0 ]
        then
          echo "-----> Successfully resolved."
          git push "$remote" master
        else
          echo -e "\a"
          return 1
        fi
      fi
    else
      echo "-----> Network error, trying again next time."
    fi
  fi
}

function newsync() {
  cd "$1"

  if [ "$2" != "origin" ] && [ "$2" != "no-sync" ]
  then
    echo "New sync doesn't support custom remotes!"
    exit 4
  fi

  git-sync sync $2
}

if [ -z "$min_free_space" ]
then
  min_free_space=1000000
  min_free_space_desc='1G'
fi

RED="\033[0;31m"
END="\033[0m"

while true
do
  if [ "$1" != "all" ]
  then
    $cmd "$path" "$remote"
  else
    retcodes=()
    for i in ${paths[@]}
    do
      if [ ! -d "$i" ]
      then
        echo "-----> Directory $i doesn't exist, skipping"
        continue
      fi
      freespace=$(df -k --output=avail "$i" | tail -n +2)
      if [ -f "$i/.disable-git-sync" ]
      then
        echo "-----> Git sync disabled for repo at $i"
      elif [ "$freespace" -lt $min_free_space ]
      then
        echo "-----> Drive for repo $i contains less than $min_free_space_desc free space, skipping"
      elif [ -f "$HOME/.scott_script/gitsync/.no-remote-all" ]
      then
        echo "-----> Syncing repo (no-remote-all) at $i..."
        $cmd "$i" 'no-sync'
        retcodes+=($?)
      else
        echo "-----> Syncing repo at $i..."
        $cmd "$i" "$remote"
        retcodes+=($?)
      fi
    done
  fi

  echo -n '-----> Sync results: '
  for i in "${retcodes[@]}"
  do
    if [ $i -eq 0 ]
    then
      echo -n .
    else
      echo -ne "${RED}E${END}"
    fi
  done
  echo
  echo "-----> Sleeping at $(date) for $time seconds."
  sleep "$time"
done
