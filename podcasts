#!/bin/bash
# Helper script for managing podcast subscriptions.
# Copyright (C) 2022 Scott Weldon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

validArgs=('rss_url' 'speed_factor')

function usage() {
  echo 'Usage: podcasts <podcast> <command>'
  echo
  echo 'Where <podcast> is short code matching config file name for podcast.'
  echo 'If <podcast> is `all`, loop through all available podcasts  and '
  echo 'run <command> on each.'
  echo
  echo 'Subcommands:'
  echo
  echo '  get-xml'
  echo '  speedup'
  exit 1
}

function download-podcasts() {
  shortname="$1"
  filename="$HOME/.scott-script/podcasts/$shortname.xml"

  statusFile="$HOME/.scott-script/podcasts/.$shortname-downloaded"
  if [ -f "$statusFile" ]
  then
    lastUpdated=$(stat --format '%Y' "$statusFile")
  else
    lastUpdated=0
  fi

  i=1
  while true
  do
    index=$i
    i=$(expr $i + 1)

    xmllint --xpath "/rss/channel/item[$index]" "$filename"
    echo

    pubDate=$(xmllint --xpath "/rss/channel/item[$index]/pubDate/text()" "$filename")
    pubDateRaw=$(date --date="$pubDate" +%s)
    if [ $lastUpdated -gt $pubDateRaw ]
    then
      echo "Podcast $shortname is up to date."
      break
    fi

    read -p 'Download this episode? [Y/n/a/<enter filename>] ' answer
    [ "$answer" == 'a' ] && break
    [ "$answer" == 'n' ] && continue
    if [ "$answer" != 'y' ] && [ "$answer" != 'Y' ] && [ "$answer" != '' ]
    then
      outputFile="$answer"
    fi


    url=$(xmllint --xpath "string(/rss/channel/item[$index]/enclosure/@url)" "$filename")

    if [ "$outputFile" != '' ]
    then
      wget --output-document "$outputFile" "$url"
    else
      wget "$url"
    fi
  done

  # FIXME: touch based on latest timestamp just in case
  touch "$statusFile"
}

if [ "$1" == '' ]
then
  usage
fi

if [ "$1" == 'sync' ]
then
  shift

  validArgs=('sync_path' 'device_name')
  source loadconf "$HOME/.scott-script/podcasts" "sync.cfg" validArgs[@]

  if [ -d "$sync_path" ]
  then
    mv *.fast.* "$sync_path"
    exit 0
  else
    echo "Could not find $device_name, is it mounted?"
    exit 1
  fi
fi

# TODO: error checking
podcast="$1"

if [ "$podcast" == 'all' ]
then
  shift
  for pod in $(ls "$HOME/.scott-script/podcasts" | grep cfg | sed 's/\.cfg//g')
  do
    podcasts "$pod" "$@"
  done

  exit 0
fi

source loadconf "$HOME/.scott-script/podcasts" "$podcast.cfg" validArgs[@]

if [ "$rss_url" == '' ]
then
  echo "Invalid podcast '$podcast', or 'rss_url' was empty."
  exit 2
fi

xmlfile="$HOME/.scott-script/podcasts/$podcast.xml"
case "$2" in
  get-xml)
    [ "$rss_url" == 'FIXME' ] && exit 3
    wget -O "$xmlfile" "$rss_url"
    ;;
  speedup)
    files="$(ls $podcast-* | grep -v '.fast.mp3' | grep -v '.mp3.orig' | grep -v '.fast.m4a' | grep -v '.m4a.orig')"
    for filename in $files
    do
      audio-speedup.sh "$filename" "$speed_factor" || break
    done
    ;;
  download)
    [ "$rss_url" == 'FIXME' ] && exit 3
    download-podcasts "$podcast"
    ;;
  # TODO: other commands
  *)
    usage
esac
