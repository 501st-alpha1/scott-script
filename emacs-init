#!/bin/bash
# Helper script to install and update Emacs packages.
# Copyright (C) 2015-2017 Scott Weldon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

validArgs=("basedir")
source loadconf "$HOME/.scott_script/emacs" "packages.cfg" validArgs[@]

github=(
  "501st-alpha1/emacs-auto-formatter"
  "501st-alpha1/emacs-init"
  "501st-alpha1/facebook"
  "501st-alpha1/twittering-mode"
  "Bruce-Connor/aggressive-indent-mode"
  "Bruce-Connor/names"
  "DarwinAwardWinner/ido-ubiquitous"
  "NicolasPetton/seq.el"
  "OmniSharp/omnisharp-emacs"
  "Silex/docker.el"
  "Wilfred/ht.el"
  "abo-abo/ace-window"
  "abo-abo/avy"
  "alphapapa/org-super-agenda"
  "alphapapa/ts.el"
  "auto-complete/auto-complete"
  "auto-complete/popup-el"
  "bbatsov/persp-projectile"
  "bbatsov/projectile"
  "company-mode/company-mode"
  "dengste/doc-present"
  "dominikh/go-mode.el"
  "dougm/vagrant-tramp"
  "editorconfig/editorconfig-emacs"
  "emacs-pe/docker-tramp.el"
  "emacsmirror/emms"
  "emacsmirror/git-timemachine"
  "flycheck/flycheck"
  "fxbois/web-mode"
  "jrblevin/deft"
  "jrblevin/markdown-mode"
  "jschaf/emacs-lorem-ipsum"
  "jtatarik/magit-gitflow"
  "jwiegley/emacs-chess"
  "jwiegley/ruby-mode"
  "kazu-yamamoto/Mew"
  "kiwanami/emacs-deferred"
  "ledger/ledger-mode"
  "lewang/fic-mode"
  "lewang/flx"
  "lujun9972/pocket-api.el"
  "lujun9972/pocket-mode"
  "magit/ghub"
  "magit/git-modes"
  "magit/magit"
  "magit/magit-annex"
  "magit/magit-popup"
  "magit/orgit"
  "magit/ssh-agency"
  "magit/with-editor"
  "magnars/dash.el"
  "magnars/s.el"
  "mattkeller/mk-project"
  "mbunkus/simple-rtm"
  "michaelklishin/cucumber.el"
  "mina86/auto-dim-other-buffers.el"
  "nex3/perspective-el"
  "nonsequitur/inf-ruby"
  "org-trello/org-trello"
  "pashky/restclient.el"
  "phikal/compat.el"
  "purcell/less-css-mode"
  "rejeep/f.el"
  "rolandwalker/string-utils"
  "rust-lang/rust-mode"
  "spotify/dockerfile-mode"
  "sprang/emacs-2048"
  "sshaw/git-link"
  "syohex/emacs-git-gutter"
  "thieman/soundcloud.el"
  "tkf/emacs-request"
  "vermiculus/apiwrap.el"
  "vermiculus/ghub-plus"
  "vermiculus/magithub"
  "vibhavp/emacs-lsp"
  "vibhavp/emacs-xkcd"
  "winterTTr/ace-jump-mode"
  "yoshiki/yaml-mode"
)
third_party=(
  "https://code.orgmode.org/bzg/org-mode.git"
  "https://code.orgmode.org/bzg/org-sync.git"
)

function loadRepo() {
  url=$1
  if [ "${url:(-4)}" == ".git" ]
  then
    baseurl="${url:0:(-4)}"
  else
    baseurl=$url
  fi
  IFS='/' read -ra array <<< "$baseurl"
  len=${#array[@]}
  last=$(expr $len - 1)
  dir=$(echo ${array[$last]} | sed 's/\./-/g')

  if [ -d $dir ]
  then
    if [ $update -eq 0 ]
    then
      echo "Folder exists, skipping $url..."
    else
      if [ "$dir" == "org-mode" ]
      then
	  echo "FIXME: Skipping org-mode update to avoid bug."
      elif [ "$dir" == "org-super-agenda" ]
      then
          echo "FIXME: Skipping org-super-agenda until Emacs updated."
      else
      pushd "$dir" > /dev/null
      git pull
      popd > /dev/null
      echo "Updated $dir"; echo;
      fi
    fi
  else
    git clone $url
    if [ "$dir" != "${array[$last]}" ]
    then
      mv "${array[$last]}" "$dir"
    fi
  fi
}

if [ ! -d "$basedir" ]
then
  echo "Variable basedir is incorrectly configured."
  echo "It is '$basedir'."
  echo "It should be a folder."

  exit 1
fi

cd $basedir

if [ "$1" == "--no-update" ]
then
  update=0
else
  update=1
fi

if [ $update -eq 1 ]
then
  echo "Running ssh-add, please unlock once, if necessary."
  ssh-add -l > /dev/null
  if [ "$?" -ne 0 ]
  then
    ssh-add
  fi
fi

for name in ${github[*]}
do
  loadRepo ssh://git@github.com/$name
done

for url in ${third_party[*]}
do
  loadRepo $url
done

# FIXME: flycheck tests cause load errors.
if [ -d "flycheck/test" ]
then
   rm -rf flycheck/test
fi

if [ -d org-mode ]
then
  pushd org-mode
  make autoloads
  popd
fi

if [ ! -d "no-repos" ]
then
  mkdir no-repos
fi
cd no-repos

norepoarray=("http://www.emacswiki.org/emacs/download/csharp-mode.el" "http://www.emacswiki.org/emacs/download/csv-mode.el" "http://www.emacswiki.org/emacs/download/notify.el")

for file in ${norepoarray[*]}
do
  IFS='/' read -ra newarray <<< "$file"
  num=${#newarray}
  test=${newarray[$num]}
  if [ -f "$test" ]
  then
    echo "File exists, skipping $test"
  else
    wget $file
  fi
done

if [ ! -d "erc-5.3-extras" ]
then
  wget http://ftp.gnu.org/old-gnu/erc/erc-5.3-extras.zip
  unzip erc-5.3-extras.zip
else
  echo "Folder exists, skipping erc-chess."
fi
