#!/bin/bash
# Compare directories, delete identical files.
#
# Given two directories, source and dest, will recursively compare files
# (with `diff`), deleting identical files in source.
# Useful if trying to move files from source to dest and e.g. read error
# caused move to fail, meaning even files that with no error were not
# deleted.

source="$1"
dest="$2"

echo 'Preparing to compare files before deleting.'
echo "Source is '${source}', destination is '${dest}'."
echo -n 'If a file exists in both places, and the files match, then '
echo "the file in ${source} will be DELETED!"
echo 'To confirm and execute, type "yes" below.'

read -p 'Confirm? ' answer

if [ "$answer" != 'yes' ]
then
  echo 'Answer wrong, aborting!'
  exit 1
fi

function safe-diff-delete-file() {
  filename="$1"

  diff "${source}/${filename}" "${dest}/${filename}"
  if [ $? -eq 0 ]
  then
    rm --verbose "${source}/${filename}"
  else
    echo 'Found a file that did not match, aborting!'
    exit 2
  fi
}

function diff-delete-on-dir() {
  local relative_path="$1"
  local source_root=''
  local dest_root=''
  if [ "$relative_path" == '' ]
  then
    source_root="${source}"
    dest_root="${dest}"
  else
    source_root="${source}/${relative_path}"
    dest_root="${dest}/${relative_path}"
    relative_path="${relative_path}/"
  fi

  ls -A "$source_root" | while IFS='' read item
  do
    if [ -f "${source_root}/${item}" ]
    then
      safe-diff-delete-file "${relative_path}${item}" || exit $?
    elif [ -d "${source_root}/${item}" ]
    then
      diff-delete-on-dir "${relative_path}${item}" || exit $?
    else
      echo -n 'Got an unknown type for item: '
      echo "${source_root}/${item}"
      exit 3
    fi
  done

  if [ -z "$(ls -A "$source_root")" ] && [ -d "${dest_root}" ]
  then
    rmdir --verbose "${source_root}"
  fi
}

diff-delete-on-dir

exit 0
